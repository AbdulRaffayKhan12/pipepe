name: Deploy to Apigee

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

env:
  TEAMS_WEBHOOK_URL: https://abacusglobal.webhook.office.com/webhookb2/6e279d38-a82e-425d-bc2a-c1f8a54d60c2@51f97e66-3fe9-450d-88ac-7a2380c3f3c6/IncomingWebhook/2a86cd093d72455cafb0503fc1adf50d/4932dba3-6bfd-4d5f-9fcf-fe74385690e2/V2pRIdhyjxtMj7YaQ2JRYfggpvLkxjSuwU_gaoZ4ILnjc1

jobs:
  deploy:
    runs-on: windows-latest
    env:
      API_NAME: reverse-pipeline1
      PROXY_NAME: apiproxy
      ORG_CONFIG_PATH: org-config.txt
      ZIP_PATH: ${{ github.workspace }}/Reverse-pipe.zip

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Org and Env Config
        id: org-config
        shell: pwsh
        run: |
          $configText = Get-Content "${{ env.ORG_CONFIG_PATH }}" | ForEach-Object { $_.Trim() }
          $orgLine = $configText | Where-Object { $_ -like 'org=*' }
          $envLine = $configText | Where-Object { $_ -like 'env=*' }
          if (-not $orgLine -or -not $envLine) {
              Write-Error "Missing org or env entry in org-config.txt"
              exit 1
          }
          $org = $orgLine -replace '^org=', ''
          $environments = ($envLine -replace '^env=', '').Split(',') | ForEach-Object { $_.Trim() }

          Write-Host "Loaded Org: $org"
          Write-Host "Loaded Environments: $($environments -join ', ')"

          switch ($org) {
            "abacus-apigee-demo" {
              $provider = "projects/180599253937/locations/global/workloadIdentityPools/demo-pool/providers/demo-github"
              $sa = "raffay-check@abacus-apigee-demo.iam.gserviceaccount.com"
            }
            "abacus-apigee-demo2" {
              $provider = "projects/738158130399/locations/global/workloadIdentityPools/demo2-pool/providers/demo2-github"
              $sa = "raffay-cicd@abacus-apigee-demo2.iam.gserviceaccount.com"
            }
            default {
              Write-Error "Unsupported org: $org"
              exit 1
            }
          }

          Add-Content -Path $env:GITHUB_ENV -Value "APIGEE_ORG=$org"
          Add-Content -Path $env:GITHUB_ENV -Value "APIGEE_ENVS=$($environments -join ',')"
          Add-Content -Path $env:GITHUB_ENV -Value "WIF_PROVIDER=$provider"
          Add-Content -Path $env:GITHUB_ENV -Value "SERVICE_ACCOUNT=$sa"

      - name: Authenticate to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: "access_token"
          export_environment_variables: false

      - name: Zip Proxy
        shell: pwsh
        run: |
          $zipPath = "${{ env.ZIP_PATH }}"
          if (Test-Path $zipPath) { Remove-Item $zipPath }
          Push-Location ${{ github.workspace }}
          tar -a -c -f $zipPath apiproxy
          Pop-Location
          Write-Host "Proxy zipped at $zipPath"

      - name: Import Apigee Proxy
        shell: pwsh
        run: |
          $org = $Env:APIGEE_ORG
          $zipFile = $Env:ZIP_PATH
          $token = "${{ steps.auth.outputs.access_token }}"
          $importResponseFile = "${{ github.workspace }}\import_response.json"
          Invoke-WebRequest -Uri "https://apigee.googleapis.com/v1/organizations/$org/apis?action=import&name=$($Env:API_NAME)" `
            -Method POST -InFile $zipFile -Headers @{ Authorization = "Bearer $token"; "Content-Type"="application/octet-stream" } `
            -OutFile $importResponseFile
          $revision = (Get-Content $importResponseFile | ConvertFrom-Json).revision
          Write-Host "Imported Proxy Revision: $revision"
          Add-Content -Path $env:GITHUB_ENV -Value "APIGEE_REVISION=$revision"

      - name: Deploy Apigee Proxy
        shell: pwsh
        run: |
          $org = $Env:APIGEE_ORG
          $revision = $Env:APIGEE_REVISION
          $token = "${{ steps.auth.outputs.access_token }}"
          $envList = $Env:APIGEE_ENVS.Split(',')
          $deployResults = @()
          foreach ($envName in $envList) {
              Write-Host "Deploying $($Env:API_NAME) revision $revision to environment $envName"
              Invoke-WebRequest -Uri "https://apigee.googleapis.com/v1/organizations/$org/environments/$envName/apis/$($Env:API_NAME)/revisions/$revision/deployments?override=true" `
                -Method POST -Headers @{ Authorization = "Bearer $token" }
              $deployResults += @{
                  Environment = $envName
                  Revision = $revision
                  Proxy = $Env:API_NAME
              }
          }
          $deployResults | ConvertTo-Json | Set-Content -Path "$($Env:GITHUB_WORKSPACE)\deploy_results.json"

      - name: Notify Teams on Success
        if: ${{ success() }}
        shell: pwsh
        run: |
          $deployResults = Get-Content "$($Env:GITHUB_WORKSPACE)\deploy_results.json" | ConvertFrom-Json
          $rows = $deployResults | ForEach-Object { "<tr><td>$($_.Proxy)</td><td>$($_.Environment)</td><td>$($_.Revision)</td></tr>" } -join ""
          $htmlTable = "<table border='1' cellspacing='0' cellpadding='5'><tr><th>API Proxy Name</th><th>Environment</th><th>Revision</th></tr>$rows</table>"
          $payload = @{
              text = "Apigee deployment completed successfully."
              attachments = @(@{ contentType = "application/vnd.microsoft.card.adaptive"; content = @{ type = "AdaptiveCard"; version = "1.0"; body = @(@{ type = "TextBlock"; text = "Deployment Summary"; weight = "Bolder"; size = "Medium" }, @{ type = "TextBlock"; text = $htmlTable; wrap = true }) } })
          } | ConvertTo-Json -Depth 4
          Invoke-RestMethod -Uri $Env:TEAMS_WEBHOOK_URL -Method Post -Body $payload -ContentType 'application/json'

      - name: Notify Teams on Failure
        if: ${{ failure() }}
        shell: pwsh
        run: |
          $payload = @{
              text = "Apigee deployment failed for $($Env:API_NAME). Please check the workflow logs."
          } | ConvertTo-Json
          Invoke-RestMethod -Uri $Env:TEAMS_WEBHOOK_URL -Method Post -Body $payload -ContentType 'application/json'
