name: Apigee Deployment

on:
  push:
    branches:
      - '**'

jobs:
  deploy:
    runs-on: windows-latest

    env:
      ORG_CONFIG_PATH: org-config.txt
      SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Load Org and Env Config
      shell: pwsh
      run: |
        $configText = Get-Content $Env:ORG_CONFIG_PATH | ForEach-Object { $_.Trim() }
        $orgLine = $configText | Where-Object { $_ -like 'org=*' }
        $envLine = $configText | Where-Object { $_ -like 'env=*' }

        if (-not $orgLine -or -not $envLine) {
          Write-Error "Missing org or env entry in org-config.txt"
          exit 1
        }

        $org = $orgLine -replace '^org=', ''
        $envs = ($envLine -replace '^env=', '').Split(',') | ForEach-Object { $_.Trim() }

        Write-Host "âœ… Loaded Org: $org"
        Write-Host "âœ… Loaded Environments: $envs"

        Set-Variable -Name ORG -Value $org
        Set-Variable -Name ENV_LIST -Value ($envs -join ',')

    - name: Create ZIP of Apigee Proxy
      shell: pwsh
      run: |
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        $sourceDir = "${{ github.workspace }}\Reverse-pipe"
        $zipFile = "${{ github.workspace }}\Reverse-pipe.zip"

        if (-Not (Test-Path $sourceDir)) {
          Write-Error "Proxy source directory not found: $sourceDir"
          exit 1
        }

        if (Test-Path $zipFile) { Remove-Item $zipFile }
        [System.IO.Compression.ZipFile]::CreateFromDirectory($sourceDir, $zipFile)
        Write-Host "âœ… Created ZIP: $zipFile"
        Set-Variable -Name ZIP_FILE -Value $zipFile

    - name: Authenticate with GCP Service Account
      shell: pwsh
      run: |
        $keyPath = "${{ github.workspace }}\service-account.json"
        Set-Content -Path $keyPath -Value $Env:SERVICE_ACCOUNT_KEY -Encoding utf8

        # Authenticate with gcloud
        gcloud auth activate-service-account --key-file=$keyPath
        $token = gcloud auth print-access-token
        Write-Host "âœ… GCP Access Token generated"
        Set-Variable -Name GCP_TOKEN -Value $token

    - name: Import Apigee Proxy
      shell: pwsh
      run: |
        $org = $Env:ORG
        $zipFile = $Env:ZIP_FILE
        $token = $Env:GCP_TOKEN

        $importResponseFile = "${{ github.workspace }}\import_response.json"
        Invoke-WebRequest -Uri "https://apigee.googleapis.com/v1/organizations/$org/apis?action=import&name=reverse-pipeline1" `
          -Method POST -InFile $zipFile -Headers @{ Authorization = "Bearer $token" } -OutFile $importResponseFile

        $revision = (Get-Content $importResponseFile | ConvertFrom-Json).revision
        Write-Host "âœ… Imported Proxy Revision: $revision"
        Set-Variable -Name REVISION -Value $revision

    - name: Deploy Apigee Proxy
      shell: pwsh
      run: |
        $org = $Env:ORG
        $revision = $Env:REVISION
        $token = $Env:GCP_TOKEN
        $envList = $Env:ENV_LIST.Split(',')

        foreach ($envName in $envList) {
          Write-Host "ðŸš€ Deploying reverse-pipeline1 revision $revision to environment $envName"
          Invoke-WebRequest -Uri "https://apigee.googleapis.com/v1/organizations/$org/environments/$envName/apis/reverse-pipeline1/revisions/$revision/deployments?override=true" `
            -Method POST -Headers @{ Authorization = "Bearer $token" }
          Write-Host "âœ… Deployment to $envName completed"
        }
