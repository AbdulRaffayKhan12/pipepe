name: Deploy Apigee Proxy

on:
  push:        # trigger on all branches
    branches:
      - "**"
  workflow_dispatch:

env:
  API_NAME: reverse-pipeline1
  PROXY_NAME: Reverse-pipe
  GIT_REPO_URL: https://github.com/AbdulRaffayKhan12/pipepe.git
  ORG_CONFIG_PATH: org-config.txt
  ZIP_PATH: ${{ github.workspace }}/Reverse-pipe.zip

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: abacus-apigee-demo2
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Load Org and Env Config
        shell: pwsh
        run: |
          $configText = Get-Content "${{ env.ORG_CONFIG_PATH }}" | ForEach-Object { $_.Trim() }
          $orgLine = $configText | Where-Object { $_ -like 'org=*' }
          $envLine = $configText | Where-Object { $_ -like 'env=*' }

          if (-not $orgLine -or -not $envLine) {
            Write-Error "‚ùå Missing org or env entry in org-config.txt"
            exit 1
          }

          $org = $orgLine -replace '^org=', ''
          $envs = ($envLine -replace '^env=', '').Split(',') | ForEach-Object { $_.Trim() }

          Write-Host "‚úÖ Loaded Org: $org"
          Write-Host "‚úÖ Loaded Environments: $envs"

          echo "APIGEE_ORG=$org" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APIGEE_ENV=$($envs[0])" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create API Zip
        shell: pwsh
        run: |
          $sourceDir = "${{ github.workspace }}\apiproxy"
          $zipPath = "${{ env.ZIP_PATH }}"

          if (!(Test-Path $sourceDir)) {
            Write-Error "‚ùå Source folder not found: $sourceDir"
            exit 1
          }

          if (Test-Path $zipPath) {
            Remove-Item $zipPath
          }

          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($sourceDir, $zipPath)
          Write-Host "‚úÖ Created zip: $zipPath"

      - name: Get Access Token
        shell: pwsh
        run: |
          $token = gcloud auth print-access-token
          echo "APIGEE_TOKEN=$token" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ Access Token Retrieved"

      - name: Import Proxy
        shell: pwsh
        run: |
          curl.exe --location "https://apigee.googleapis.com/v1/organizations/${{ env.APIGEE_ORG }}/apis?action=import&name=${{ env.API_NAME }}" `
            --header "Authorization: Bearer $env:APIGEE_TOKEN" `
            --header "Content-Type: application/octet-stream" `
            --data-binary "@${{ env.ZIP_PATH }}" -o import_response.json

          if (!(Test-Path "import_response.json")) {
            Write-Error "‚ùå import_response.json was not created!"
            exit 1
          }

          $revision = (Get-Content import_response.json | ConvertFrom-Json).revision
          Write-Host "‚úÖ Imported Proxy Revision: $revision"
          echo "REVISION=$revision" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Deploy Proxy
        shell: pwsh
        run: |
          Write-Host "üöÄ Deploying $env:API_NAME revision $env:REVISION to environment $env:APIGEE_ENV"

          curl.exe --location --request POST "https://apigee.googleapis.com/v1/organizations/${{ env.APIGEE_ORG }}/environments/${{ env:APIGEE_ENV }}/apis/${{ env:API_NAME }}/revisions/$env:REVISION/deployments?override=true" `
            --header "Authorization: Bearer $env:APIGEE_TOKEN" `
            --header "Content-Type: application/json" `
            --data "{}"
