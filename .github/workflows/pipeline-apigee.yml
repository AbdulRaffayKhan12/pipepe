name: Deploy to Apigee

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest
    env:
      API_NAME: reverse-pipeline1
      PROXY_NAME: Reverse-pipe
      GIT_REPO_URL: https://github.com/AbdulRaffayKhan12/pipepe.git
      ORG_CONFIG_PATH: org-config.txt
      ZIP_PATH: ${{ github.workspace }}/Reverse-pipe.zip

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY}}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Load Org and Env Config
        run: |
          $configText = Get-Content "${{ env.ORG_CONFIG_PATH }}" | ForEach-Object { $_.Trim() }

          $orgLine = $configText | Where-Object { $_ -like 'org=*' }
          $envLine = $configText | Where-Object { $_ -like 'env=*' }

          if (-not $orgLine -or -not $envLine) {
              Write-Error "‚ùå Missing org or env entry in org-config.txt"
              exit 1
          }

          $org = $orgLine -replace '^org=', ''
          $environments = ($envLine -replace '^env=', '').Split(',') | ForEach-Object { $_.Trim() }

          Write-Host "‚úÖ Loaded Org: $org"
          Write-Host "‚úÖ Loaded Environments: $($environments -join ', ')"

          Add-Content -Path $env:GITHUB_ENV -Value "APIGEE_ORG=$org"
          Add-Content -Path $env:GITHUB_ENV -Value "APIGEE_ENVS=$($environments -join ',')"
        shell: pwsh

      - name: Get Access Token
        run: |
          $token = gcloud auth print-access-token
          if (-not $token) {
              Write-Error "‚ùå Failed to get access token"
              exit 1
          }
          Write-Host "‚úÖ Access Token Retrieved"
          Add-Content -Path $env:GITHUB_ENV -Value "APIGEE_TOKEN=$token"
        shell: pwsh

      - name: Import Proxy to Apigee
        run: |
          curl.exe --location "https://apigee.googleapis.com/v1/organizations/${{ env.APIGEE_ORG }}/apis?action=import&name=${{ env.API_NAME }}" `
            --header "Authorization: Bearer ${{ env.APIGEE_TOKEN }}" `
            --header "Content-Type: multipart/form-data" `
            -F "file=@${{ env.ZIP_PATH }}" `
            --silent --show-error --fail `
            --output response.json

          $revision = (Get-Content response.json | ConvertFrom-Json).revision
          if (-not $revision) {
              Write-Error "‚ùå Failed to retrieve revision from import response"
              exit 1
          }
          Write-Host "‚úÖ Imported Proxy Revision: $revision"
          Add-Content -Path $env:GITHUB_ENV -Value "REVISION=$revision"
        shell: pwsh

      - name: Deploy Proxy to Environments
        run: |
          $envs = "${{ env.APIGEE_ENVS }}".Split(',')
          foreach ($e in $envs) {
              $trimmedEnv = $e.Trim()
              Write-Host "üöÄ Deploying ${{ env.API_NAME }} revision $env:REVISION to environment $trimmedEnv"

              curl.exe --location --request POST "https://apigee.googleapis.com/v1/organizations/${{ env.APIGEE_ORG }}/environments/$trimmedEnv/apis/${{ env.API_NAME }}/revisions/$env:REVISION/deployments?override=true" `
                --header "Authorization: Bearer ${{ env.APIGEE_TOKEN }}" `
                --silent --show-error --fail `
                --output deploy_response.json

              Write-Host "‚úÖ Deployed to environment $trimmedEnv"
          }
        shell: pwsh
