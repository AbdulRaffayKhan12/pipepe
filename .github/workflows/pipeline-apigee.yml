name: Deploy Apigee Proxy

on:
  push:
    branches:
      - "**"   # run on all branches

jobs:
  deploy:
    runs-on: windows-latest
    env:
      API_NAME: reverse-pipeline1
      PROXY_NAME: Reverse-pipe
      GIT_REPO_URL: https://github.com/AbdulRaffayKhan12/pipepe.git
      ORG_CONFIG_PATH: org-config.txt
      ZIP_PATH: ${{ github.workspace }}\Reverse-pipe.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate with service account key (from GitHub secret)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Load Org and Env Config
        shell: pwsh
        run: |
          $configText = Get-Content "${{ env.ORG_CONFIG_PATH }}" | ForEach-Object { $_.Trim() }
          $orgLine = $configText | Where-Object { $_ -like 'org=*' }
          $envLine = $configText | Where-Object { $_ -like 'env=*' }

          if (-not $orgLine -or -not $envLine) {
            Write-Error "‚ùå Missing org or env entry in org-config.txt"
            exit 1
          }

          $org = $orgLine -replace '^org=', ''
          $envs = ($envLine -replace '^env=', '').Split(',') | ForEach-Object { $_ -replace '\s','' }

          Write-Host "‚úÖ Loaded Org: $org"
          Write-Host "‚úÖ Loaded Environments: $envs"

          echo "APIGEE_ORG=$org" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APIGEE_ENV=$($envs[0])" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Clean old zip if exists
        shell: pwsh
        run: |
          if (Test-Path "${{ env.ZIP_PATH }}") {
            Remove-Item "${{ env.ZIP_PATH }}"
          }

      - name: Create API Zip
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory("${{ github.workspace }}\${{ env.PROXY_NAME }}", "${{ env.ZIP_PATH }}")
          Write-Host "‚úÖ Created zip: ${{ env.ZIP_PATH }}"

      - name: Get Access Token
        shell: pwsh
        run: |
          $token = gcloud auth print-access-token
          if (-not $token) {
            Write-Error "‚ùå Failed to get access token"
            exit 1
          }
          Write-Host "‚úÖ Access Token Retrieved"
          echo "APIGEE_TOKEN=$token" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Import API Proxy
        shell: pwsh
        run: |
          Write-Host "üì¶ Importing proxy: $env:API_NAME"
          curl.exe --location `
            --request POST "https://apigee.googleapis.com/v1/organizations/$env:APIGEE_ORG/apis?action=import&name=$env:API_NAME" `
            --header "Authorization: Bearer $env:APIGEE_TOKEN" `
            --header "Content-Type: multipart/form-data" `
            --form "file=@$env:ZIP_PATH" `
            -o import_response.json   # ‚úÖ save response here

          if (!(Test-Path "import_response.json")) {
            Write-Error "‚ùå Failed to create import_response.json"
            exit 1
          }

          $revision = (Get-Content import_response.json | ConvertFrom-Json).revision
          if (-not $revision) {
            Write-Error "‚ùå Failed to parse revision from import_response.json"
            exit 1
          }

          Write-Host "‚úÖ Imported Proxy Revision: $revision"
          echo "REVISION=$revision" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Deploy API Proxy
        shell: pwsh
        run: |
          Write-Host "üöÄ Deploying $env:API_NAME revision $env:REVISION to environment $env:APIGEE_ENV"
          curl.exe --location `
            --request POST "https://apigee.googleapis.com/v1/organizations/$env:APIGEE_ORG/environments/$env:APIGEE_ENV/apis/$env:API_NAME/revisions/$env:REVISION/deployments?override=true" `
            --header "Authorization: Bearer $env:APIGEE_TOKEN"
