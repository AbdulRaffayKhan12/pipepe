name: Deploy to Apigee

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      API_NAME: reverse-pipeline1
      PROXY_NAME: apiproxy
      ORG_CONFIG_PATH: org-config.txt
      ZIP_PATH: ${{ github.workspace }}/Reverse-pipe.zip
      TEAMS_WEBHOOK: https://abacusglobal.webhook.office.com/webhookb2/...
      POSTMAN_COLLECTION_UID: 40041998-dee7eec2-5d39-49da-b172-2c535588dfc8
      POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Org and Env Config
        id: org-config
        run: |
          configText=$(cat "${{ env.ORG_CONFIG_PATH }}" | xargs)
          org=$(echo "$configText" | grep -o 'org=[^ ]*' | cut -d= -f2)
          envs=$(echo "$configText" | grep -o 'env=[^ ]*' | cut -d= -f2)
          if [ -z "$org" ] || [ -z "$envs" ]; then
            echo "Missing org or env entry in org-config.txt"
            exit 1
          fi
          case "$org" in
            "abacus-apigee-demo")
              provider="projects/180599253937/locations/global/workloadIdentityPools/demo-pool/providers/demo-github"
              sa="raffay-check@abacus-apigee-demo.iam.gserviceaccount.com"
              ;;
            "abacus-apigee-demo2")
              provider="projects/738158130399/locations/global/workloadIdentityPools/demo2-pool/providers/demo2-github"
              sa="raffay-cicd@abacus-apigee-demo2.iam.gserviceaccount.com"
              ;;
            *)
              echo "Unsupported org: $org"
              exit 1
              ;;
          esac
          echo "APIGEE_ORG=$org" >> $GITHUB_ENV
          echo "APIGEE_ENVS=$envs" >> $GITHUB_ENV
          echo "WIF_PROVIDER=$provider" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT=$sa" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: "access_token"
          export_environment_variables: false

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Newman + Reporters
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install newman newman-reporter-htmlextra

      - name: Zip Proxy
        run: |
          zip -r "${{ env.ZIP_PATH }}" apiproxy

      - name: Import Apigee Proxy
        id: import
        run: |
          token="${{ steps.auth.outputs.access_token }}"
          importResponseFile="${{ github.workspace }}/import_response.json"
          curl -s -X POST "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis?action=import&name=$API_NAME" \
            -H "Authorization: Bearer $token" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$ZIP_PATH" \
            -o "$importResponseFile"
          revision=$(jq -r '.revision' "$importResponseFile")
          echo "APIGEE_REVISION=$revision" >> $GITHUB_ENV
          previousRevision=$(jq -r '.lastRevisionCreatedBeforeImport // empty' "$importResponseFile")
          echo "PREVIOUS_REVISION=$previousRevision" >> $GITHUB_ENV

      - name: Deploy Apigee Proxy
        id: deploy
        run: |
          token="${{ steps.auth.outputs.access_token }}"
          envList=$(echo $APIGEE_ENVS | tr ',' ' ')
          for envName in $envList; do
            curl -s -X POST "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$envName/apis/$API_NAME/revisions/$APIGEE_REVISION/deployments?override=true" \
              -H "Authorization: Bearer $token"
          done

      - name: Wait for Deployment
        run: |
          token="${{ steps.auth.outputs.access_token }}"
          for envName in $(echo $APIGEE_ENVS | tr ',' ' '); do
            state=""
            retries=0
            while [ "$state" != "deployed" ] && [ $retries -lt 10 ]; do
              state=$(curl -s -H "Authorization: Bearer $token" "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$envName/apis/$API_NAME/revisions/$APIGEE_REVISION/deployments" | jq -r '.environment[0].state')
              echo "Deployment state in $envName: $state"
              [ "$state" != "deployed" ] && sleep 5
              retries=$((retries+1))
            done
            if [ "$state" != "deployed" ]; then
              echo "Deployment failed in $envName"
              exit 1
            fi
          done

      - name: Run Postman (Newman) Tests
        id: newman
        run: |
          mkdir -p newman
          npx newman run "https://api.getpostman.com/collections/${POSTMAN_COLLECTION_UID}?apikey=${POSTMAN_API_KEY}" \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman/newman-report.html \
            --reporter-junit-export newman/newman-report.xml
        continue-on-error: true

      - name: Rollback if Tests Fail
        if: steps.newman.outcome != 'success'
        run: |
          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "Tests failed. Rolling back to revision $PREVIOUS_REVISION"
            token="${{ steps.auth.outputs.access_token }}"
            for envName in $(echo $APIGEE_ENVS | tr ',' ' '); do
              curl -s -X POST "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$envName/apis/$API_NAME/revisions/$PREVIOUS_REVISION/deployments?override=true" \
                -H "Authorization: Bearer $token"
            done
          else
            echo "No previous revision to rollback to."
          fi

      - name: Upload Newman Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-test-reports
          path: newman/

      - name: Send Teams Notification
        if: always()
        run: |
          if [ -f "newman/newman-report.html" ]; then
            status="Deployment and tests completed"
          else
            status="Deployment succeeded but tests failed"
          fi
          payload="{\"title\": \"Apigee Deployment Notification\", \"text\": \"$status\"}"
          curl -H "Content-Type: application/json" -d "$payload" $TEAMS_WEBHOOK
