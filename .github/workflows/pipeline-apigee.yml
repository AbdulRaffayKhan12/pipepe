name: Deploy to Apigee

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      API_NAME: reverse-pipeline1
      PROXY_NAME: apiproxy
      ORG_CONFIG_PATH: org-config.txt
      ZIP_PATH: ${{ github.workspace }}/Reverse-pipe.zip
      TEAMS_WEBHOOK: https://abacusglobal.webhook.office.com/webhookb2/...
      API_ENDPOINTS: https://your-api-endpoint1,https://your-api-endpoint2 # comma-separated

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Org and Env Config
        id: org-config
        run: |
          configText=$(cat "${{ env.ORG_CONFIG_PATH }}" | xargs)
          org=$(echo "$configText" | grep -o 'org=[^ ]*' | cut -d= -f2)
          envs=$(echo "$configText" | grep -o 'env=[^ ]*' | cut -d= -f2)
          if [ -z "$org" ] || [ -z "$envs" ]; then
            echo "Missing org or env entry in org-config.txt"
            exit 1
          fi
          case "$org" in
            "abacus-apigee-demo")
              provider="projects/180599253937/locations/global/workloadIdentityPools/demo-pool/providers/demo-github"
              sa="raffay-check@abacus-apigee-demo.iam.gserviceaccount.com"
              ;;
            "abacus-apigee-demo2")
              provider="projects/738158130399/locations/global/workloadIdentityPools/demo2-pool/providers/demo2-github"
              sa="raffay-cicd@abacus-apigee-demo2.iam.gserviceaccount.com"
              ;;
            *)
              echo "Unsupported org: $org"
              exit 1
              ;;
          esac
          echo "APIGEE_ORG=$org" >> $GITHUB_ENV
          echo "APIGEE_ENVS=$envs" >> $GITHUB_ENV
          echo "WIF_PROVIDER=$provider" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT=$sa" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: "access_token"
          export_environment_variables: false

      - name: Zip Proxy
        run: zip -r "${{ env.ZIP_PATH }}" apiproxy

      - name: Import Apigee Proxy
        id: import_proxy
        run: |
          org=$APIGEE_ORG
          zipFile=$ZIP_PATH
          token="${{ steps.auth.outputs.access_token }}"
          importResponseFile="${{ github.workspace }}/import_response.json"
          curl -s -X POST "https://apigee.googleapis.com/v1/organizations/$org/apis?action=import&name=$API_NAME" \
            -H "Authorization: Bearer $token" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$zipFile" \
            -o "$importResponseFile"
          revision=$(cat "$importResponseFile" | jq -r '.revision')
          echo "APIGEE_REVISION=$revision" >> $GITHUB_ENV

      - name: Deploy Apigee Proxy
        id: deploy_proxy
        run: |
          org=$APIGEE_ORG
          revision=$APIGEE_REVISION
          token="${{ steps.auth.outputs.access_token }}"
          envList=$(echo $APIGEE_ENVS | tr ',' ' ')
          previous_revision=""
          # Save previous revision to rollback if needed
          for envName in $envList; do
            prev=$(curl -s -H "Authorization: Bearer $token" \
              "https://apigee.googleapis.com/v1/organizations/$org/environments/$envName/apis/$API_NAME/deployments" \
              | jq -r '.environment[0].revision[0].name // empty')
            if [ -n "$prev" ]; then
              previous_revision=$prev
            fi
            curl -s -X POST "https://apigee.googleapis.com/v1/organizations/$org/environments/$envName/apis/$API_NAME/revisions/$revision/deployments?override=true" \
              -H "Authorization: Bearer $token"
          done
          echo "PREVIOUS_REVISION=$previous_revision" >> $GITHUB_ENV

      - name: Run API Health Check
        id: health_check
        run: |
          failed=0
          IFS=',' read -ra urls <<< "$API_ENDPOINTS"
          for url in "${urls[@]}"; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "$url returned $status"
            if [ "$status" -ne 200 ]; then
              failed=1
            fi
          done
          echo "TEST_FAILED=$failed" >> $GITHUB_ENV
          if [ "$failed" -eq 1 ]; then
            exit 1
          fi

      - name: Rollback if Tests Fail
        if: env.TEST_FAILED == '1'
        run: |
          echo "Rolling back to previous revision $PREVIOUS_REVISION"
          org=$APIGEE_ORG
          token="${{ steps.auth.outputs.access_token }}"
          envList=$(echo $APIGEE_ENVS | tr ',' ' ')
          for envName in $envList; do
            curl -s -X POST "https://apigee.googleapis.com/v1/organizations/$org/environments/$envName/apis/$API_NAME/revisions/$PREVIOUS_REVISION/deployments?override=true" \
              -H "Authorization: Bearer $token"
          done

      - name: Send Teams Notification
        if: always()
        run: |
          status="Deployment succeeded"
          if [ "${{ env.TEST_FAILED }}" == "1" ]; then
            status="Deployment failed, rolled back to revision $PREVIOUS_REVISION"
          fi
          payload="{\"title\": \"Apigee Deployment Notification\", \"text\": \"$status\"}"
          curl -H "Content-Type: application/json" -d "$payload" $TEAMS_WEBHOOK
